<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-02-18T15:23:47-08:00</updated><id>/feed.xml</id><title type="html">My Blogs</title><subtitle>A little information on different topics about Laravel. I hope you like it!</subtitle><entry><title type="html">CSS Basics - 2</title><link href="/jekyll/update/2022/02/17/CSS-Basics-2.html" rel="alternate" type="text/html" title="CSS Basics - 2" /><published>2022-02-17T23:42:19-08:00</published><updated>2022-02-17T23:42:19-08:00</updated><id>/jekyll/update/2022/02/17/CSS-Basics-2</id><content type="html" xml:base="/jekyll/update/2022/02/17/CSS-Basics-2.html">&lt;h1 id=&quot;part-1&quot;&gt;Part 1&lt;/h1&gt;

&lt;h2 id=&quot;more-css-declarations&quot;&gt;More CSS declarations&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;I will be covering more useful CSS declarations in this blog.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;commenting-in-css&quot;&gt;Commenting in CSS&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;To comment in CSS, all you have to do is put the comment between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/*&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*/&lt;/code&gt;. They also work for multi-line comments.&lt;br /&gt;
&lt;img src=&quot;/assets/images/CSS_comment.png&quot; alt=&quot;CSS_comment&quot; title=&quot;CSS comment&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;colors&quot;&gt;Colors&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;You can define CSS colors in many different ways. You can use RBG, RGBA, HEX, HSL, HSLA and predefind color names. For color names, CSS has a total of 140 standard color names. You can apply these colors to anywhere you want, for example, text color, background color and also border colors. You could also use colors for text-shadows but I wont be mentioning about them in this blog. Please refer to the &lt;em&gt;CSS basics 1&lt;/em&gt; blog for the examples for CSS colors&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;backgrounds&quot;&gt;Backgrounds&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;You use this when you want to add a background effects to your elements. I will be talking about the following 5 properties.&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;background-color
      &lt;ol&gt;
        &lt;li&gt;You can use this if you just want to add a color to the background of the element.&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;background-image
      &lt;ol&gt;
        &lt;li&gt;If you want to add a background image, you can use this property. But you will have to specify the path of the image you want in your background. For example, the command would be something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;background-image: url(&apos;&amp;lt;path_of_image&amp;gt;&apos;);&lt;/code&gt;&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;background-repeat
      &lt;ol&gt;
        &lt;li&gt;Let’s say you added a background image and for some reasons, say, it was repeated because of wrong image size, then you can use background-repeat to fix it. If it was repeated horizontally, then you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;background-repeat: repeat-x;&lt;/code&gt; to fix it. There are also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repeat-y&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no-repeat&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inherit&lt;/code&gt;, etc.&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;background-attachment
      &lt;ol&gt;
        &lt;li&gt;You can make your background image sroll with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;background-attachment: scroll&lt;/code&gt; or make if stick using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;background-image: fized;&lt;/code&gt;.&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;background-position
      &lt;ol&gt;
        &lt;li&gt;If you want to move your background around, you can use this property. For example, you could &lt;em&gt;center&lt;/em&gt; your background image, move it to &lt;em&gt;right&lt;/em&gt;/&lt;em&gt;left&lt;/em&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;background position: left top;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;background-position: right-bottom&lt;/code&gt;.&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;borders&quot;&gt;Borders&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;You can style your borders in many ways. There are also different types of borders where you can specify with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;border-style:&lt;/code&gt;. You can add colors to your border, change thickness, change color or make rounded borders and many more.
&lt;img src=&quot;/assets/images/css_borders.png&quot; alt=&quot;css_borders&quot; title=&quot;CSS borders&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-mdn-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics&quot;&gt;MDN&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/css_logo.png&quot; alt=&quot;css_logo&quot; title=&quot;logo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 1</summary></entry><entry><title type="html">CSS Basics - 1</title><link href="/jekyll/update/2022/02/04/CSS-basics-1.html" rel="alternate" type="text/html" title="CSS Basics - 1" /><published>2022-02-04T21:45:17-08:00</published><updated>2022-02-04T21:45:17-08:00</updated><id>/jekyll/update/2022/02/04/CSS-basics-1</id><content type="html" xml:base="/jekyll/update/2022/02/04/CSS-basics-1.html">&lt;h1 id=&quot;part-1&quot;&gt;Part 1&lt;/h1&gt;

&lt;h2 id=&quot;what-is-css&quot;&gt;What is CSS?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;CSS is called Cascading Style Sheets. If HTML is used to structure the content of a webpage, then CSS is used to add style to that. You could also add CSS in html instead of making HTML and CSS two different files which I wrote in previous blogs. There is something called SCSS which is an advanced version of CSS where you can use variables to shorten the amount of code. SCSS also offers a lot of features that CSS doesn’t have but we’ll talk about those in the future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;linking-html-with-external-css-file&quot;&gt;Linking HTML with External CSS file&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;To use external CSS in your html file, first you will have to put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;link href=&quot;path of CSS file&quot; rel=&quot;stylesheet&quot;&amp;gt;&lt;/code&gt; between your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;understanding-the-anatomy&quot;&gt;Understanding the Anatomy&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;CSS has something called “rules” or “rulessets” which has two parts. They are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Selector&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Declaration&lt;/code&gt;. Selector is the name of the HTML element which you are going to style and Declaration is how you want to style that element’s property. Inside the declaration, we have property and property value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;first-example&quot;&gt;First Example&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Let’s modify a paragraph using CSS. In this example, we will change the text color to pink. We have this simple unstyled heading paragraph here.
&lt;img src=&quot;/assets/images/plainHTML.png&quot; alt=&quot;plainHTML&quot; title=&quot;plain HTML&quot; /&gt;
This is how it looks like after we have applied CSS to the paragraph &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag.  &lt;br /&gt;
&lt;img src=&quot;/assets/images/HTML_with_CSS.png&quot; alt=&quot;HTML_with_CSS&quot; title=&quot;HTML with CSS&quot; /&gt; &lt;br /&gt;
And the code for CSS looks like this.&lt;br /&gt;
&lt;img src=&quot;/assets/images/CSS_code.png&quot; alt=&quot;CSS_code&quot; title=&quot;CSS code&quot; /&gt;&lt;br /&gt;
In this case, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; is the selector and everything we put in the declaration will change how the paragraph looks like. In the declaration, we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color&lt;/code&gt; which will modify the color of the text. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pink&lt;/code&gt; defines the color you want to change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;selecting-multiple-elements&quot;&gt;Selecting multiple elements&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;In this example, we will be modifying multiple elements under one rule. This will save you a lot of time and code to write but of course if you want them to have different styles, you will have to put each of them under differnet rules.&lt;br /&gt;
&lt;img src=&quot;/assets/images/multiple_elements.png&quot; alt=&quot;multiple_elements&quot; title=&quot;Mutiple Elements&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-mdn-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics&quot;&gt;MDN&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/css_logo.png&quot; alt=&quot;css_logo&quot; title=&quot;logo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 1</summary></entry><entry><title type="html">Docker Basics - 1</title><link href="/jekyll/update/2021/12/01/docker-basics-1.html" rel="alternate" type="text/html" title="Docker Basics - 1" /><published>2021-12-01T21:35:17-08:00</published><updated>2021-12-01T21:35:17-08:00</updated><id>/jekyll/update/2021/12/01/docker-basics-1</id><content type="html" xml:base="/jekyll/update/2021/12/01/docker-basics-1.html">&lt;h1 id=&quot;part-1&quot;&gt;Part 1&lt;/h1&gt;

&lt;h2 id=&quot;what-is-docker&quot;&gt;What is Docker?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Docker is an open-source containerization platform. It’s also and open platform for developing and running softwares. Docker lets you seperate your applications from your infrastructure so that you can deliver softwares quickly. You can also control your infrastructures like you do to your applications with docker. Docker has an invironment where you can test/run your applications in an isolated place called containers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;contaners&quot;&gt;Contaners&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Containers are “standardized executable components combining application source code with the operating system (OS) libraries and dependencies required to run that code in any environment”. You can install any dependencies and packages you need for your applciation and run it in a docker container.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;architecture-and-how-it-works&quot;&gt;Architecture and how it works&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;When you run a docker commmand, the docker client contacts the docker daemon which basically takes in docker API requests. Let’s say you want to create a container from a premade image from the registry. The docker daemon will look for the image you want from the registry and will make it for you. All you have to do is run a command from the docker client. REST API is used when docker client and daemon contact each other. 
&lt;img src=&quot;/assets/images/docker_archi.png&quot; alt=&quot;docker_archi&quot; title=&quot;docker_archi&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pulling-an-image&quot;&gt;Pulling an image&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;To create an image for your container, all you have to do is run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker pull [OPTIONS] NAME[:TAG|@DIGEST]&lt;/code&gt;. There are also few more options like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--disable-content-trust&lt;/code&gt; that can be used together with the pull command.
Here is an example of pulling an image.
&lt;img src=&quot;/assets/images/docker_pull.png&quot; alt=&quot;docker_pull&quot; title=&quot;docker_pull&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;making-your-own-image&quot;&gt;Making your own image&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Sometimes you want to create an image where there is not only the OS for the image but also other dependicies, services or anything you want. Docker lets you customize your image so that you can set it up in a way where everything you need is ready when you create a container with that image. You need to write a dockerfile in order to do that. Then you have to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build [OPTIONS] PATH | URL | -&lt;/code&gt;
&lt;img src=&quot;/assets/images/dockerfile.png&quot; alt=&quot;dockerfile&quot; title=&quot;dockerfile&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;creating-a-container&quot;&gt;Creating a container&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;To create a container from the image you pull, you need to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker create [OPTIONS] IMAGE [COMMAND] [ARG...]&lt;/code&gt;. There are also a &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/create/&quot;&gt;lists&lt;/a&gt; of options you can use when you create a container. Here is an example of creating a container from fedora together with the options &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i : Keep STDIN open even if not attached&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t : Allocate a pseudo-TTY&lt;/code&gt;. 
&lt;img src=&quot;/assets/images/docker_create.png&quot; alt=&quot;docker_create&quot; title=&quot;docker_create&quot; /&gt;
To create a container from a dockerfile, you need to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run [OPTIONS] IMAGE [COMMAND] [ARG...]&lt;/code&gt; and it will not only create the container but also run everything that you specified in the dockerfile.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-docker-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://docs.docker.com/&quot;&gt;docker&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/docker_logo.png&quot; alt=&quot;docker_logo&quot; title=&quot;logo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 1</summary></entry><entry><title type="html">HTML Basics - 3</title><link href="/jekyll/update/2021/11/21/html-basics-3.html" rel="alternate" type="text/html" title="HTML Basics - 3" /><published>2021-11-21T22:46:38-08:00</published><updated>2021-11-21T22:46:38-08:00</updated><id>/jekyll/update/2021/11/21/html-basics-3</id><content type="html" xml:base="/jekyll/update/2021/11/21/html-basics-3.html">&lt;h1 id=&quot;part-3&quot;&gt;Part 3&lt;/h1&gt;

&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;WHat is CSS is? CSS is cascading style sheets. It’s used to design your webpage how ever you want. There are three types of CSS. Even though CSS is not part of HTML, I decided to talk about it because most beautiful websites you see on the internet are party written in CSS. I will be only going over how CSS works so that it will make us understand the relationship between HTML and CSS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;types-of-css&quot;&gt;Types of CSS&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;There are three types of CSS to beautify your webpage.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Inline CSS&lt;/li&gt;
    &lt;li&gt;Internal CSS&lt;/li&gt;
    &lt;li&gt;External CSS&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;inline-css&quot;&gt;Inline CSS&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Inline CSS is using CSS inside the HTML tag. Inline CSS is good when you only want to make a little change to your tag or a specific tag without changing the other tags of the same name. Note that you can put as much attributes you want inside but if you only put one, you don’t need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt;. Otherwise, you’ll need to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; to seperate the attributes. Inline CSS also has highest priority and it will load the fastest. But keep in mind that, if there are a lot of inline CSS on your html page, it will take longer to load the entire site.
&lt;img src=&quot;/assets/images/inline_CSS.png&quot; alt=&quot;inline_CSS&quot; title=&quot;inline_CSS&quot; /&gt;
As you can see, there are two hello worlds in the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag and inline CSS allow us to design those separately. You can do this with internal CSS or external CSS as well but there are extra steps if you want to do it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;internal-css&quot;&gt;Internal CSS&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Internal CSS is using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your html page. Internal CSS has priority after inline CSS. I personally don’t use Internal CSS because I want to make my html document as simple as possible. 
&lt;img src=&quot;/assets/images/internal_CSS.png&quot; alt=&quot;internal_CSS&quot; title=&quot;internal_CSS&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;external-css&quot;&gt;External CSS&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;To link an external CSS file to an html document, you must first say to your html document that you will be using CSS from this file. To do that, you will have to put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;&amp;lt;Path_to_your_CSS_file&quot;&amp;gt;&lt;/code&gt; inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag. Then you can start designing your website.
&lt;img src=&quot;/assets/images/external_CSS.png&quot; alt=&quot;external_CSS&quot; title=&quot;external_CSS&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;commenting&quot;&gt;Commenting&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;To comment in html, all you have to do is to start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;--&lt;/code&gt;, comment what ever you want, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&amp;gt;&lt;/code&gt;.
This is an example comment.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&amp;lt;!-- BANNER --&amp;gt;&quot;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-html-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://html.com/&quot;&gt;html&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/html_logo.png&quot; alt=&quot;html_logo&quot; title=&quot;logo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 3</summary></entry><entry><title type="html">HTML Basics - 2</title><link href="/jekyll/update/2021/11/14/html-basics-2.html" rel="alternate" type="text/html" title="HTML Basics - 2" /><published>2021-11-14T04:32:16-08:00</published><updated>2021-11-14T04:32:16-08:00</updated><id>/jekyll/update/2021/11/14/html-basics-2</id><content type="html" xml:base="/jekyll/update/2021/11/14/html-basics-2.html">&lt;h1 id=&quot;part-2&quot;&gt;Part 2&lt;/h1&gt;

&lt;h2 id=&quot;more-common-tags&quot;&gt;More common tags&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There are a lot of useful tags for creating beautiul pages and I will be going over the very common ones that everybody use. The first one is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag. It’s an header element and can go from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h1&lt;/code&gt; to. The difference between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;hearder&amp;gt;&lt;/code&gt; is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;header&amp;gt;&lt;/code&gt; is for the document title and the metadata of the website while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag is used for like headings for an article. You can have up to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; and the size of the heading will be smaller accordingly. 
 &lt;img src=&quot;/assets/images/h1AndHeader.png&quot; alt=&quot;h1AndHeader&quot; title=&quot;h1AndHeader&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another one is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; which is paragraph element. It is a block element and can be used to design paragraphs. 
 &lt;img src=&quot;/assets/images/pTag.png&quot; alt=&quot;pTag&quot; title=&quot;pTag&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The next one we have is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag. It is known as division tag. It is used when you want to use different styles to differnet parts of your webpage. For example - if you have two paragraphs in your page, you can use div to style your first paragraph and second paragraph differently. 
 &lt;img src=&quot;/assets/images/divTag.png&quot; alt=&quot;divTag&quot; title=&quot;divTag&quot; /&gt;
&lt;strong&gt;Note&lt;/strong&gt;
You can also use in-line CSS to make different styles for above example without using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; but using CSS will make your html file look more simple and clean. I will be going over CSS in the nexxt blog.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tag is simple. It is used to add a new line.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;. They are &lt;em&gt;ordered List&lt;/em&gt; and &lt;em&gt;unordered List&lt;/em&gt;. If you want to make a bullet list, you can use unordered list and if you want to list with numbers, you can use ordered list. You can also style your bullet points with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;style=&quot;list-style-type:circle&quot;&lt;/code&gt; inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; tag. In order to create a list, you’ll also have to include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; together with these tags.
 &lt;img src=&quot;/assets/images/listsTag.png&quot; alt=&quot;listsTag&quot; title=&quot;listsTag&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;i&amp;gt;&lt;/code&gt; are also used to make your page look pretty. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; to add a horizontal line, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;&lt;/code&gt; to &lt;strong&gt;bold&lt;/strong&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;i&amp;gt;&lt;/code&gt; to &lt;em&gt;italicize&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag is to add an image to your page. You can either add the link to an image or  path to the image you want to add from your files. 
 &lt;img src=&quot;/assets/images/imgTag.png&quot; alt=&quot;imgTag&quot; title=&quot;imgTag&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;table&amp;gt;&lt;/code&gt; is just like the name says - to create table. You will have to use it together with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tr&amp;gt; - table row&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;th&amp;gt; - table header&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;td&amp;gt; - table element&lt;/code&gt;. There are more but you don’t have to worry about it for now. And you will also need to add style to your table to make borders visible because the default doesn’t have any borders. 
 &lt;img src=&quot;/assets/images/tableTag.png&quot; alt=&quot;tableTag&quot; title=&quot;tableTag&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;we-will-be-talking-about-css-next-week&quot;&gt;We will be talking about CSS next week!&lt;/h3&gt;

&lt;h3 id=&quot;you-can-also-check-out-html-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://html.com/&quot;&gt;html&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/html_logo.png&quot; alt=&quot;html_logo&quot; title=&quot;logo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 2</summary></entry><entry><title type="html">HTML Basics - 1</title><link href="/jekyll/update/2021/11/07/html-basics-1.html" rel="alternate" type="text/html" title="HTML Basics - 1" /><published>2021-11-07T22:37:08-08:00</published><updated>2021-11-07T22:37:08-08:00</updated><id>/jekyll/update/2021/11/07/html-basics-1</id><content type="html" xml:base="/jekyll/update/2021/11/07/html-basics-1.html">&lt;h1 id=&quot;part-1&quot;&gt;Part 1&lt;/h1&gt;

&lt;h2 id=&quot;what-is-html&quot;&gt;What is HTML?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What we are seeing on the screens of our laptops, phones, ipad, etc when we go to any websites are mostly written in HTML language. It was first invented by Tim Berners-Lee in 1993. Later html version 4 became official standard in 1999. And then we now have html5.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-declaration&quot;&gt;The declaration&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;When we write a html document, we have to start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;, which is basically informing the browser to expect a html document. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!doctype&lt;/code&gt; is not case sensitive and so is the html after.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-default-template&quot;&gt;The default template&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;The default template for html5 looks like this. Everything between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt; &amp;lt;/head&amp;gt;&lt;/code&gt; tag is going to be the head of the document. What’s written in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;title&amp;gt;&lt;/code&gt; is how it’s going to be called on the tab of your browser.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag can be removed nowadays and it’s not thta important anymore. Everything that goes into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag will be what you see on your page. In the example below, you will see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello world&lt;/code&gt; words on your browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Example html page&amp;lt;/title&amp;gt;
    &amp;lt;meta name=&quot;description&quot; content=&quot;Our first page&quot;&amp;gt;
    &amp;lt;meta name=&quot;keywords&quot; content=&quot;html tutorial template&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    Hello world
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hello_world.png&quot; alt=&quot;hello_world&quot; title=&quot;hello-world&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-footer&quot;&gt;The footer&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Althought the footer tag wasn’t specified in the above example, it can added if you want to. It’s basically what you see at the bottom in most pages. Attached at the bottom is an example of how a footer can be designed to look pretty so it’s a pretty useful part. All the stuff will go under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;footer&amp;gt; &amp;lt;/footer&amp;gt;&lt;/code&gt; tag. 
&lt;img src=&quot;/assets/images/example_footer.png&quot; alt=&quot;footer&quot; title=&quot;footer&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-html-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://html.com/&quot;&gt;html&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/html_logo.png&quot; alt=&quot;html_logo&quot; title=&quot;logo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 1</summary></entry><entry><title type="html">Git Basics - 3</title><link href="/jekyll/update/2021/11/02/git-basics-3.html" rel="alternate" type="text/html" title="Git Basics - 3" /><published>2021-11-02T00:08:13-07:00</published><updated>2021-11-02T00:08:13-07:00</updated><id>/jekyll/update/2021/11/02/git-basics-3</id><content type="html" xml:base="/jekyll/update/2021/11/02/git-basics-3.html">&lt;h1 id=&quot;part-3&quot;&gt;Part 3&lt;/h1&gt;

&lt;h2 id=&quot;cloning-a-repo-continued-from-last-week&quot;&gt;Cloning a repo (Continued from last week)&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Cloning a repo with https requires users to put in their github username as well as the password. But the password is not your github password but your personal access token. Tokens can be made as much as you want win custom permissions. To create a personal access token, go to your github &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings &amp;gt; developer settings &amp;gt; personal access tokens &amp;gt; generate new token&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;checking-logs&quot;&gt;Checking logs&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;You can check your commits/branches/mergings by running the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --branch&lt;/code&gt;. It will show you a graph of your log so that you have an overview of how commits have merged and how git history was created. 
Here is one example of how the graph looks like.
&lt;img src=&quot;/assets/images/gitlog.png&quot; alt=&quot;git_log&quot; title=&quot;log&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;checking-what-changed-in-your-file&quot;&gt;Checking what changed in your file&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff &amp;lt;filename&amp;gt;&lt;/code&gt; lets you see changes you made before and after of a file together. It is pretty convenient because you can check what have changed in a file if someone makes a commit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;merging&quot;&gt;Merging&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Merging is when you have different branches on your repo and if you want everything to be on your main branch after the review, you can integrate the other branch to your main branch. On larger companies, when one or more developers start to merge onto main, 3 way merges occur. 
This is an example of 3 way merge.
&lt;img src=&quot;/assets/images/3waymerge.jpeg&quot; alt=&quot;3_way_merge&quot; title=&quot;3_way_merge&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-git-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/git_logo.png&quot; alt=&quot;git_logo&quot; title=&quot;logo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 3</summary></entry><entry><title type="html">Git Basics - 2</title><link href="/jekyll/update/2021/10/27/git-basics-2.html" rel="alternate" type="text/html" title="Git Basics - 2" /><published>2021-10-27T00:21:07-07:00</published><updated>2021-10-27T00:21:07-07:00</updated><id>/jekyll/update/2021/10/27/git-basics-2</id><content type="html" xml:base="/jekyll/update/2021/10/27/git-basics-2.html">&lt;h1 id=&quot;part-2&quot;&gt;Part 2&lt;/h1&gt;

&lt;h2 id=&quot;cloning-a-repo&quot;&gt;Cloning a repo&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;If you already created a repo in your github and you want to have it in your local machine and start working with it, you can clone it. You don’t need to initialize with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt; anymore if you clone. There are 3 different ways to clone a repo to your local machine.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Through HTTPS protocol&lt;/li&gt;
    &lt;li&gt;Through SSH&lt;/li&gt;
    &lt;li&gt;THrough Github CLI&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTPS and SSH are most commonly used. To clone a repo, you just have to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone &amp;lt;repo link from git hub&amp;gt;&lt;/code&gt;. To clone with HTTPS, You will need to put in your github username and password. This method is universally accessible but will prompt you to put username and password time to time which can be annoying. And it’s not as secure as SSH. To clone with SSH, you will need to create a ssh keys first. To create a ssh key, you have to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen -t rsa -b 4096 -C “&amp;lt;your_email&amp;gt;”&lt;/code&gt;, enter passphrase and save it in your preferred directory or press enter to save in default path. After that, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval $(ssh-agent -s)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-add ~/.ssh/id_rsa&lt;/code&gt; then copy the public key from that file and add it in your github settings. Lastly, add yourself as a github user with git config command in your terminal. It’s a little bit of work to set up to use SSH but it’s more secure. HTTPS is more recommended than SSH because of simplicity so it’s up to you to decide which to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pushing-your-work-to-your-github-repo&quot;&gt;Pushing your work to your github repo&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;If you want to push your work to your github repo, you need to make sure you have the hidden file called .git in your current dir. If you dont, you can use git clone first. Always check where you are or what files need to be added using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt;. It will tell you what branch you are in, what files are not staged for commit and what files are untracked. Git status can tell you more than these but for now I wont include the other ones. After you check everything with git status, make sure you’re not in your main because you dont want broken codes in you main. Then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &amp;lt;&quot;commit message&quot;&amp;gt;&lt;/code&gt; and then you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; to push your code to your repo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-git-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/git_logo.png&quot; alt=&quot;git_logo&quot; title=&quot;logo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 2</summary></entry><entry><title type="html">Git Basics - 1</title><link href="/jekyll/update/2021/10/19/git-basics-1.html" rel="alternate" type="text/html" title="Git Basics - 1" /><published>2021-10-19T23:30:05-07:00</published><updated>2021-10-19T23:30:05-07:00</updated><id>/jekyll/update/2021/10/19/git-basics-1</id><content type="html" xml:base="/jekyll/update/2021/10/19/git-basics-1.html">&lt;h1 id=&quot;part-1&quot;&gt;Part 1&lt;/h1&gt;

&lt;h2 id=&quot;what-is-git&quot;&gt;What is Git?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Git is a version control system which is very very useful for everyone basically. It can handle projects from smaller ones to very big ones. Git can track your files very efficiently. People also tend to mistake git and github. They are not the same thing. As I mentioned above, git can save you a lot of time tracking your projects and github is a cloud-based hosting services that control your repositories.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-to-install-git-in-your-machine&quot;&gt;How to install git in your machine&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;There are few different ways to install git on a Mac but my favourite would be,&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Open Terminal&lt;/li&gt;
    &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install git&lt;/code&gt; (You will need to have Homebrew installed first)&lt;/li&gt;
    &lt;li&gt;Then varify by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git version&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;To install git on Windows&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Download the latest version from &lt;a href=&quot;https://gitforwindows.org/&quot;&gt;git installer&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Follow instructions in Git Setup wizard&lt;/li&gt;
    &lt;li&gt;Open command prompt&lt;/li&gt;
    &lt;li&gt;Then varify by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git version&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;To install Git on Linux&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Open command prompt&lt;/li&gt;
    &lt;li&gt;For Debian and Ubuntu, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get update&lt;/code&gt; first then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get install git-all&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;For Fedora, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo dnf install git-all&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Then varify by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git version&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;initiate-a-repo&quot;&gt;Initiate a repo&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;To create a new local repo in your current working directory, you have to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt;. If you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -al&lt;/code&gt; command, you will see a file name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt;. You don’t need to touch it but that is going to track everything you do in your directory. You won’t be able to push, commit, merge, fetch without a .git file in your working directory and will get the error message &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fatal: not a git repository (or any of the parent directories): .git&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-git-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/git_logo.png&quot; alt=&quot;git_logo&quot; title=&quot;logo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 1</summary></entry><entry><title type="html">Laravel Basics - 5</title><link href="/jekyll/update/2021/10/12/laravel-basics-5.html" rel="alternate" type="text/html" title="Laravel Basics - 5" /><published>2021-10-12T00:46:05-07:00</published><updated>2021-10-12T00:46:05-07:00</updated><id>/jekyll/update/2021/10/12/laravel-basics-5</id><content type="html" xml:base="/jekyll/update/2021/10/12/laravel-basics-5.html">&lt;h1 id=&quot;part-3&quot;&gt;Part 3&lt;/h1&gt;

&lt;h2 id=&quot;blade-templates&quot;&gt;Blade Templates&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Laravel has a really useful templating engine called blade. For starters, the blade files are stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resources/view&lt;/code&gt; folder. An empty laravel project has a default page when you go to the localhost:8080. &lt;img src=&quot;/assets/images/default_page.png&quot; alt=&quot;default_page&quot; title=&quot;default-page&quot; /&gt;
Blade templates use .blade.php as their extension. What you are seeing here is from a blade file called “welcome.blade.php”. Plain PHP codes can be used in blade template. You can also use routes and controllers to redirect the user to any blade pages you desire. Data can be displayed on the blade file by putting the variable inside { }.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;This is an example route&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Route::get(&apos;/&apos;, function () {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return view(&apos;welcome&apos;, [&apos;name&apos; =&amp;gt; &apos;Samantha&apos;]);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;});&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-your-own-blade-file&quot;&gt;Using your own blade file&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;For example, if you want to get rid of a default page and insert a page you made, you will have to first of all create database, migrate it, add model and controller file, add your own blade file under view, and lastly you can use routes to set your blade as default page. CSS can also be used to style your page as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;rendering-json&quot;&gt;Rendering JSON&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;You can also initialize a javascript variable by inserting JSON code to your view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;if-statements&quot;&gt;If statements&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;if statments can be deployed usind &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@if&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@elseif&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@else&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@endif&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Here is an example if statment&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@if (count($records) === 1)
    I have one record!
@elseif (count($records) &amp;gt; 1)
    I have multiple records!
@else
    I don&apos;t have any records!
@endif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;you-can-also-check-out-laravel-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://laravel.com/docs/8.x/releases&quot;&gt;Laravel&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/laravel-8.png&quot; alt=&quot;Laravel&quot; title=&quot;Laravel-8&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 3</summary></entry></feed>