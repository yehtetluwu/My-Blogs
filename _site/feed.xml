<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-11-03T12:45:24+06:30</updated><id>/feed.xml</id><title type="html">My Blogs</title><subtitle>A little information on different topics about Laravel. I hope you like it!</subtitle><entry><title type="html">Git Basics - 3</title><link href="/jekyll/update/2021/11/02/git-basics-3.html" rel="alternate" type="text/html" title="Git Basics - 3" /><published>2021-11-02T13:38:13+06:30</published><updated>2021-11-02T13:38:13+06:30</updated><id>/jekyll/update/2021/11/02/git-basics-3</id><content type="html" xml:base="/jekyll/update/2021/11/02/git-basics-3.html">&lt;h1 id=&quot;part-3&quot;&gt;Part 3&lt;/h1&gt;

&lt;h2 id=&quot;cloning-a-repo-continued-from-last-week&quot;&gt;Cloning a repo (Continued from last week)&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Cloning a repo with https requires users to put in their github username as well as the password. But the password is not your github password but your personal access token. Tokens can be made as much as you want win custom permissions. To create a personal access token, go to your github &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings &amp;gt; developer settings &amp;gt; personal access tokens &amp;gt; generate new token&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;checking-logs&quot;&gt;Checking logs&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;You can check your commits/branches/mergings by running the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --branch&lt;/code&gt;. It will show you a graph of your log so that you have an overview of how commits have merged and how git history was created. 
Here is one example of how the graph looks like.
&lt;img src=&quot;/assets/images/gitlog.png&quot; alt=&quot;git_log&quot; title=&quot;log&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;checking-what-changed-in-your-file&quot;&gt;Checking what changed in your file&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff &amp;lt;filename&amp;gt;&lt;/code&gt; lets you see changes you made before and after of a file together. It is pretty convenient because you can check what have changed in a file if someone makes a commit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;merging&quot;&gt;Merging&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Merging is when you have different branches on your repo and if you want everything to be on your main branch after the review, you can integrate the other branch to your main branch. On larger companies, when one or more developers start to merge onto main, 3 way merges occur. 
This is an example of 3 way merge.
&lt;img src=&quot;/assets/images/3waymerge.jpeg&quot; alt=&quot;3_way_merge&quot; title=&quot;3_way_merge&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-git-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/git_logo.png&quot; alt=&quot;git_logo&quot; title=&quot;logo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 3</summary></entry><entry><title type="html">Git Basics - 2</title><link href="/jekyll/update/2021/10/27/git-basics-2.html" rel="alternate" type="text/html" title="Git Basics - 2" /><published>2021-10-27T13:51:07+06:30</published><updated>2021-10-27T13:51:07+06:30</updated><id>/jekyll/update/2021/10/27/git-basics-2</id><content type="html" xml:base="/jekyll/update/2021/10/27/git-basics-2.html">&lt;h1 id=&quot;part-2&quot;&gt;Part 2&lt;/h1&gt;

&lt;h2 id=&quot;cloning-a-repo&quot;&gt;Cloning a repo&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;If you already created a repo in your github and you want to have it in your local machine and start working with it, you can clone it. You don’t need to initialize with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt; anymore if you clone. There are 3 different ways to clone a repo to your local machine.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Through HTTPS protocol&lt;/li&gt;
    &lt;li&gt;Through SSH&lt;/li&gt;
    &lt;li&gt;THrough Github CLI&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTPS and SSH are most commonly used. To clone a repo, you just have to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone &amp;lt;repo link from git hub&amp;gt;&lt;/code&gt;. To clone with HTTPS, You will need to put in your github username and password. This method is universally accessible but will prompt you to put username and password time to time which can be annoying. And it’s not as secure as SSH. To clone with SSH, you will need to create a ssh keys first. To create a ssh key, you have to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen -t rsa -b 4096 -C “&amp;lt;your_email&amp;gt;”&lt;/code&gt;, enter passphrase and save it in your preferred directory or press enter to save in default path. After that, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval $(ssh-agent -s)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-add ~/.ssh/id_rsa&lt;/code&gt; then copy the public key from that file and add it in your github settings. Lastly, add yourself as a github user with git config command in your terminal. It’s a little bit of work to set up to use SSH but it’s more secure. HTTPS is more recommended than SSH because of simplicity so it’s up to you to decide which to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pushing-your-work-to-your-github-repo&quot;&gt;Pushing your work to your github repo&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;If you want to push your work to your github repo, you need to make sure you have the hidden file called .git in your current dir. If you dont, you can use git clone first. Always check where you are or what files need to be added using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt;. It will tell you what branch you are in, what files are not staged for commit and what files are untracked. Git status can tell you more than these but for now I wont include the other ones. After you check everything with git status, make sure you’re not in your main because you dont want broken codes in you main. Then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &amp;lt;&quot;commit message&quot;&amp;gt;&lt;/code&gt; and then you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; to push your code to your repo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-git-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/git_logo.png&quot; alt=&quot;git_logo&quot; title=&quot;logo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 2</summary></entry><entry><title type="html">Git Basics - 1</title><link href="/jekyll/update/2021/10/20/git-basics-1.html" rel="alternate" type="text/html" title="Git Basics - 1" /><published>2021-10-20T13:00:05+06:30</published><updated>2021-10-20T13:00:05+06:30</updated><id>/jekyll/update/2021/10/20/git-basics-1</id><content type="html" xml:base="/jekyll/update/2021/10/20/git-basics-1.html">&lt;h1 id=&quot;part-1&quot;&gt;Part 1&lt;/h1&gt;

&lt;h2 id=&quot;what-is-git&quot;&gt;What is Git?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Git is a version control system which is very very useful for everyone basically. It can handle projects from smaller ones to very big ones. Git can track your files very efficiently. People also tend to mistake git and github. They are not the same thing. As I mentioned above, git can save you a lot of time tracking your projects and github is a cloud-based hosting services that control your repositories.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-to-install-git-in-your-machine&quot;&gt;How to install git in your machine&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;There are few different ways to install git on a Mac but my favourite would be,&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Open Terminal&lt;/li&gt;
    &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install git&lt;/code&gt; (You will need to have Homebrew installed first)&lt;/li&gt;
    &lt;li&gt;Then varify by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git version&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;To install git on Windows&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Download the latest version from &lt;a href=&quot;https://gitforwindows.org/&quot;&gt;git installer&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Follow instructions in Git Setup wizard&lt;/li&gt;
    &lt;li&gt;Open command prompt&lt;/li&gt;
    &lt;li&gt;Then varify by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git version&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;To install Git on Linux&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Open command prompt&lt;/li&gt;
    &lt;li&gt;For Debian and Ubuntu, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get update&lt;/code&gt; first then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get install git-all&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;For Fedora, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo dnf install git-all&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Then varify by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git version&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;initiate-a-repo&quot;&gt;Initiate a repo&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;To create a new local repo in your current working directory, you have to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt;. If you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -al&lt;/code&gt; command, you will see a file name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt;. You don’t need to touch it but that is going to track everything you do in your directory. You won’t be able to push, commit, merge, fetch without a .git file in your working directory and will get the error message &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fatal: not a git repository (or any of the parent directories): .git&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-git-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/git_logo.png&quot; alt=&quot;git_logo&quot; title=&quot;logo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 1</summary></entry><entry><title type="html">Laravel Basics - 5</title><link href="/jekyll/update/2021/10/12/laravel-basics-5.html" rel="alternate" type="text/html" title="Laravel Basics - 5" /><published>2021-10-12T14:16:05+06:30</published><updated>2021-10-12T14:16:05+06:30</updated><id>/jekyll/update/2021/10/12/laravel-basics-5</id><content type="html" xml:base="/jekyll/update/2021/10/12/laravel-basics-5.html">&lt;h1 id=&quot;part-3&quot;&gt;Part 3&lt;/h1&gt;

&lt;h2 id=&quot;blade-templates&quot;&gt;Blade Templates&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Laravel has a really useful templating engine called blade. For starters, the blade files are stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resources/view&lt;/code&gt; folder. An empty laravel project has a default page when you go to the localhost:8080. &lt;img src=&quot;/assets/images/default_page.png&quot; alt=&quot;default_page&quot; title=&quot;default-page&quot; /&gt;
Blade templates use .blade.php as their extension. What you are seeing here is from a blade file called “welcome.blade.php”. Plain PHP codes can be used in blade template. You can also use routes and controllers to redirect the user to any blade pages you desire. Data can be displayed on the blade file by putting the variable inside { }.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;This is an example route&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Route::get(&apos;/&apos;, function () {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return view(&apos;welcome&apos;, [&apos;name&apos; =&amp;gt; &apos;Samantha&apos;]);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;});&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-your-own-blade-file&quot;&gt;Using your own blade file&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;For example, if you want to get rid of a default page and insert a page you made, you will have to first of all create database, migrate it, add model and controller file, add your own blade file under view, and lastly you can use routes to set your blade as default page. CSS can also be used to style your page as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;rendering-json&quot;&gt;Rendering JSON&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;You can also initialize a javascript variable by inserting JSON code to your view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;if-statements&quot;&gt;If statements&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;if statments can be deployed usind &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@if&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@elseif&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@else&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@endif&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Here is an example if statment&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@if (count($records) === 1)
    I have one record!
@elseif (count($records) &amp;gt; 1)
    I have multiple records!
@else
    I don&apos;t have any records!
@endif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;you-can-also-check-out-laravel-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://laravel.com/docs/8.x/releases&quot;&gt;Laravel&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/laravel-8.png&quot; alt=&quot;Laravel&quot; title=&quot;Laravel-8&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 3</summary></entry><entry><title type="html">Laravel Basics - 4</title><link href="/jekyll/update/2021/10/03/laravel-basics-4.html" rel="alternate" type="text/html" title="Laravel Basics - 4" /><published>2021-10-03T11:03:02+06:30</published><updated>2021-10-03T11:03:02+06:30</updated><id>/jekyll/update/2021/10/03/laravel-basics-4</id><content type="html" xml:base="/jekyll/update/2021/10/03/laravel-basics-4.html">&lt;h1 id=&quot;part-3&quot;&gt;Part 3&lt;/h1&gt;

&lt;h2 id=&quot;controllers&quot;&gt;Controllers&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;They can controll and organize request handling logics that are happening in your routes. You can also handle related requests under single class within containers. They can be found under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/Http/Controllers/&lt;/code&gt;. Controllers are also invokable. You can also generate an invokable controller by running this command with invokable tag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php artisan make:controller &amp;lt;Controller_Name&amp;gt; --invokable&lt;/code&gt;. There is also resource controller which has CRUD classes defined for the users autimatically. All you have to do is use –resource with the command. You also have to make sure to call the model related to the requests you are defining in your controlller so that they are usable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;This is an example controller class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use App\Http\Controllers\UserController;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Route::get(&apos;/user/{id}&apos;, [UserController::class, &apos;show&apos;]);&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;models&quot;&gt;Models&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Since this was mentioned above, what are models?&lt;/p&gt;

  &lt;p&gt;Laravel uses Eloquent which is an object-relational mapper that can interact with the databases. When you use Eloquent, each database table has corresponding Models so that it can interact with the table. To create a model, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php artisan make:model &amp;lt;model name&amp;gt;&lt;/code&gt;. You can also add –migration option which creates and modifies database tables and columns if they need to be changed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-laravel-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://laravel.com/docs/8.x/releases&quot;&gt;Laravel&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/laravel-8.png&quot; alt=&quot;Laravel&quot; title=&quot;Laravel-8&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 3</summary></entry><entry><title type="html">Laravel Basics - 3</title><link href="/jekyll/update/2021/09/27/laravel-basics-3.html" rel="alternate" type="text/html" title="Laravel Basics - 3" /><published>2021-09-27T12:20:47+06:30</published><updated>2021-09-27T12:20:47+06:30</updated><id>/jekyll/update/2021/09/27/laravel-basics-3</id><content type="html" xml:base="/jekyll/update/2021/09/27/laravel-basics-3.html">&lt;h1 id=&quot;part-3&quot;&gt;Part 3&lt;/h1&gt;

&lt;h2 id=&quot;routing&quot;&gt;Routing&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;What is routing?&lt;/p&gt;

  &lt;p&gt;Before I answer that, What are routes in Laravel? Routes are basically something that will link you to the controllers and also let the users to jump through specified paths/query strings you made for you web app. It can be seen under routes folder. Most of the times, you have to define the routes in the &lt;strong&gt;web.php&lt;/strong&gt; file.&lt;/p&gt;

  &lt;p&gt;It accepts http verbs like &lt;strong&gt;get, post, put, patch, delete and options&lt;/strong&gt;. But any html forms with &lt;em&gt;post&lt;/em&gt;, &lt;em&gt;put&lt;/em&gt;, &lt;em&gt;patch&lt;/em&gt;, &lt;em&gt;delete&lt;/em&gt; are required to include CSRF token filed. You can also redirect if you are defining a route that redirects to&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;This is an example of a defined route.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use Illuminate\Support\Facades\Route;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Route::get(&apos;/greeting&apos;, function () {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return &apos;Hello World&apos;; });&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;middleware&quot;&gt;Middleware&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Middleware is a mechanism for inspecting and filtering HTTP requests that goes into your application. Laravel has this awesome middleware which checks if the user is authenticated or not. If the user is not authenticated, it will take you to the log in screen and if the user is authenticated, it will allow futher requests into the application. And of course middlewares are not only for authentication. You can also write a log with it! 
Here is an example code for defining a middleware&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php artisan make:middleware EnsureTokenIsValid&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;csrf-protection&quot;&gt;CSRF Protection&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;CSRF has been mentioned above but what is it? It is called Cross-site request forgeries and is a type of malicious exploit where suspicious commands are being run from an authenticated user.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-laravel-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://laravel.com/docs/8.x/releases&quot;&gt;Laravel&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/laravel-8.png&quot; alt=&quot;Laravel&quot; title=&quot;Laravel-8&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 3</summary></entry><entry><title type="html">Laravel Basics - 2</title><link href="/jekyll/update/2021/09/16/laravel-basics-2.html" rel="alternate" type="text/html" title="Laravel Basics - 2" /><published>2021-09-16T08:16:47+06:30</published><updated>2021-09-16T08:16:47+06:30</updated><id>/jekyll/update/2021/09/16/laravel-basics-2</id><content type="html" xml:base="/jekyll/update/2021/09/16/laravel-basics-2.html">&lt;h1 id=&quot;part-2&quot;&gt;Part 2&lt;/h1&gt;

&lt;h2 id=&quot;setting-up-a-new-project&quot;&gt;Setting up a new project&lt;/h2&gt;
&lt;blockquote&gt;

  &lt;p&gt;It is really easy and simple to set up a new project in Laravel. All you have to do is run this command using composer.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;composer create-project laravel/laravel &amp;lt;project_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Then, you go into the directory of your project and you will have access to everything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;hosting-a-web-application-with-laravel&quot;&gt;Hosting a web application with Laravel&lt;/h2&gt;
&lt;blockquote&gt;

  &lt;p&gt;Just like prometheus or jekyll, when you want to host a web app or site on your local host, you will have to run this. But instead of the keyword like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;  , Laravel uses PHP. But make sure you are in the project directory before you host your web app.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php artisan serve&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-default-web-app&quot;&gt;The default web app&lt;/h2&gt;
&lt;blockquote&gt;

  &lt;p&gt;The first page you will see after you host your web app is the default Laravel page. It is rendered from the welcome.blade.php file under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/resourses/view&lt;/code&gt; folder. It is written in html and you can mess with it on your first try.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;styling-your-blade&quot;&gt;Styling your blade&lt;/h2&gt;
&lt;blockquote&gt;

  &lt;p&gt;There is a app.css file under public dirctory so that you can beautify your blade. But you can also use internal css or inline css to make your page more beautiful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;this-is-an-example-of-a-default-page-on-laravel&quot;&gt;This is an example of a default page on laravel&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/default_page.png&quot; alt=&quot;default_page&quot; title=&quot;default-page&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;you-can-also-check-out-laravel-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://laravel.com/docs/8.x/releases&quot;&gt;Laravel&lt;/a&gt; for more information on the official website.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/laravel-8.png&quot; alt=&quot;Laravel&quot; title=&quot;Laravel-8&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 2</summary></entry><entry><title type="html">Laravel Basics - 1</title><link href="/jekyll/update/2021/09/03/laravel-basics-1.html" rel="alternate" type="text/html" title="Laravel Basics - 1" /><published>2021-09-03T11:39:47+06:30</published><updated>2021-09-03T11:39:47+06:30</updated><id>/jekyll/update/2021/09/03/laravel-basics-1</id><content type="html" xml:base="/jekyll/update/2021/09/03/laravel-basics-1.html">&lt;h1 id=&quot;part-1&quot;&gt;Part 1&lt;/h1&gt;

&lt;h2 id=&quot;what-is-laravel&quot;&gt;What is Laravel?&lt;/h2&gt;
&lt;blockquote&gt;

  &lt;p&gt;Laravel is a web framework made for developers with pretty sick, easy-to-understand tools. It is very useful and easy for developers to create a full stack web applications in a fast time period. It has so many cool functions like dependency injection, an expressive database abstraction layer, queues and scheduled jobs, unit and integration testing, and more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;why-should-we-use-laravel&quot;&gt;Why should we use Laravel?&lt;/h2&gt;
&lt;blockquote&gt;

  &lt;p&gt;Laravel offers various tools and frameworks for you to write a web application. There are three main types of framworks that defines Laravel. It’s&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;A progressive framework where it grows together with the users.&lt;/li&gt;
    &lt;li&gt;A scalable framework which uses PHP and allow fast-distributed cache systems like Redis, horizontal scaling.&lt;/li&gt;
    &lt;li&gt;A community framework which makes Laravel incredibly developer firendly.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-to-install-laravel&quot;&gt;How to install Laravel&lt;/h2&gt;
&lt;blockquote&gt;

  &lt;p&gt;To install the latest Laravel on your local machine, you must&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;First install composer and PHP&lt;/li&gt;
    &lt;li&gt;Then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;composer create-project laravel/laravel &amp;lt;project_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;And thats it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;more-about-laravel&quot;&gt;More about laravel&lt;/h2&gt;
&lt;blockquote&gt;

  &lt;p&gt;Laravel has functions where you can set your project to automatically link with Git. You can use Laravel to create Javascript single page application and also Mobile Applciation. Cool isn’t it? But thats not all. There is alot more that Laravel can do to help your life easier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;you-can-also-check-out-laravel-for-more-information-on-the-official-website&quot;&gt;You can also check out &lt;a href=&quot;https://laravel.com/docs/8.x/releases&quot;&gt;Laravel&lt;/a&gt; for more information on the official website.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/laravel-8.png&quot; alt=&quot;Laravel&quot; title=&quot;Laravel-8&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Part 1</summary></entry></feed>